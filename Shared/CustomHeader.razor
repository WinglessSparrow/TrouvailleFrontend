@using Blazorise

@inject NavigationManager navMan
@inject ILocalStorage local
@inject ILocalStorage localStorage
@inject GlobalStateManager state
@inject IUserDataGetter userGetter

<div class="header">
    <div class="header-content">
        <div class="logo" @onclick="LogoTriger"></div>
        <div class="variable-icons">
            <div class="search-bar">
                <input id="search" type="text" placeholder="Search" @bind-value="_searchModel.SearchWord"
                    @bind-value:event="oninput" @onkeydown="Enter" />
                <a href="" @onclick=Search>
                    <Icon Name="IconName.Search" />
                </a>
            </div>
            <div class="dropdown-indicator">
                <Icon Name="IconName.ShoppingCart" />
                <div class="dropdown-content">
                    <a href="/shoppingcart">Shopping Cart
                        <Icon Name="IconName.ShoppingBasket" />
                    </a>
                    <a href="/checkout">Checkout
                        <Icon Name="IconName.CreditCard" />
                    </a>
                </div>
            </div>
            @if (_tokenIsValid)
            {
                <div class="dropdown-indicator user-settings">
                    <Icon Name="IconName.User" />
                    <span>Hi @_userName!</span>
                    <div class="dropdown-content">
                        <a href="/account">Account Settings <i class="fas fa-user-cog"></i></a>
                        <a @onclick="Logout">Logout <i class="fas fa-sign-out-alt"></i></a>
                        <a @onclick="ChangeUser">Chnange User <i class="fas fa-exchange-alt"></i></a>
                    </div>
                </div>
            }
            else
            {
                <div class="dropdown-indicator">
                    <Icon Name="IconName.Lock" />
                    <div class="dropdown-content">
                        <a href="/Register">Register
                            <i class="fas fa-clipboard-list"></i>
                        </a>
                        <a href="/Login">Login
                            <Icon Name="IconName.Key" />
                        </a>
                    </div>
                </div>
            }
        </div>
    </div>
</div>


@code {
    private TokenModel _token { get; set; }
    private bool _tokenIsValid;
    private SearchModel _searchModel = new();
    private string _userName = "user name";


    [Parameter]
    public EventCallback<ChangeEventArgs> ValueChanged { get; set; }
    public delegate Task SearchEvent(SearchModel args);
    public event SearchEvent SearchTrigered;

    protected override async Task OnInitializedAsync()
    {
        _token = await local.GetStorageAsync<TokenModel>("authToken");

        _tokenIsValid = (_token != null && _token.AuthToken != "" && _token.expireDate > DateTime.Today);

        if (_tokenIsValid)
        {
            var user = await userGetter.getUserDataAsync();
            _userName = user.FirstName;
        }

        state.Add<CustomHeader>(this);
    }
    private void LogoTriger()
    {
        navMan.NavigateTo("/");
    }

    private void Enter(KeyboardEventArgs e)
    {
        if (e.Code == "Enter" || e.Code == "NumpadEnter")
        {
            Search();
        }
    }

    private async void Search()
    {
        if (SearchTrigered != null)
        {
            await SearchTrigered.Invoke(_searchModel);
        }
    }

    private async void Logout()
    {
        await localStorage.RemoveStorageAsync("authToken");
        navMan.NavigateTo("/", forceLoad: true);
    }

    private async void ChangeUser()
    {
        await localStorage.RemoveStorageAsync("authToken");
        navMan.NavigateTo("/Login", forceLoad: true);
    }
}