@page "/shoppingcart"

@using TrouvailleFrontend.Shared.Models
@using TrouvailleFrontend.Shared.Enums
@using TrouvailleFrontend.Components.ShoppingCart
@using TrouvailleFrontend.Components.Shared
@using System.Text.Json

@inject ILocalStorage local
@inject IProductsRetriever productsRetriever
@inject NavigationManager navMan
@inject IOrderer orderer
@inject IJSRuntime js
@inject IErrorHandler errorHandler

<div class="page main-container-style">
    @if (_cartItems != null && _cartItems.Count() > 0)
    {
        @if (_products != null)
        {

            <h1>Your Shopping Cart</h1>
            <div class="content">
                <CascadingValue Value="@this">
                    <CHProductsOverviewSC Products=@_products ItemData=@_cartItems TotalPrice=@_totalPrice />
                </CascadingValue>
            </div>
        }
        else
        {
            <LoadingIndicator />
        }
    }
    else
    {
        <ErrorMessage>
            @if (_cartItems != null && _cartItems.Count() <= 0)
            {
                <b>Your shopping cart is empty <br /> please fill it with stuff</b>
            }
        </ErrorMessage>
    }
</div>

<CustomModal @ref="_modal" Name="Register" ButtonText="End Order" OnCloseSuccess="@Success" OnCloseFailure="@Failure" />
@* </div> *@

@code {
    private CustomModal _modal;
    private TokenModel _token;
    private decimal _totalPriceWithoutTax;
    private decimal _totalPrice;
    private List<ShoppingCartItemModel> _cartItems { get; set; }
    private List<ProductModel> _products { get; set; }

    private void Success()
    {
        navMan.NavigateTo("/", forceLoad: true);
    }

    private void Failure()
    {
        navMan.NavigateTo("/checkout", forceLoad: true);
    }

    protected override async Task OnInitializedAsync()
    {
        _token = await local.GetStorageAsync<TokenModel>("authToken");
        _cartItems = await local.GetStorageAsync<List<ShoppingCartItemModel>>("shoppingCart");
        StateHasChanged();
        if (_cartItems != null && _cartItems.Count() > 0)
        {
            _products = await productsRetriever.GetProductsByIdAsync(_cartItems);

            for (int i = 0; i < _cartItems.Count(); i++)
            {
                _totalPrice += _cartItems[i].Cardinality * _products[i].Price;
                //calculating tax
                decimal tax = (_products[i].Tax) / (decimal)100.0;
                _totalPriceWithoutTax += (_products[i].Price - _products[i].Price * tax) * _cartItems[i].Cardinality;
            }
        }
    }

    public async Task delete(string id)
    {
        if (_cartItems != null)
        {
            for (int i = 0; i < _cartItems.Count; i++)
            {
                if (_cartItems[i].ProductId == id)
                {

                    _totalPrice -= _cartItems[i].Cardinality * _products[i].Price;
                    _cartItems.RemoveAt(i);
                    _products.RemoveAt(i);

                    await local.SetStorageAsync("shoppingCart", _cartItems);

                }
            }
        }

        StateHasChanged();
    }

    public async Task increase(string id)
    {
        if (_cartItems != null)
        {
            for (int i = 0; i < _cartItems.Count; i++)
            {
                if (_cartItems[i].ProductId == id)
                {

                    _totalPrice += _products[i].Price;
                    _cartItems[i].Cardinality++;

                    await local.SetStorageAsync("shoppingCart", _cartItems);

                }
            }
        }

        StateHasChanged();
    }

    public async Task decrease(string id)
    {
        if (_cartItems != null)
        {
            for (int i = 0; i < _cartItems.Count; i++)
            {
                if (_cartItems[i].ProductId == id)
                {

                    if ((_cartItems[i].Cardinality - 1) >= 1)
                    {
                        _totalPrice -= _products[i].Price;
                        _cartItems[i].Cardinality--;
                        await local.SetStorageAsync("shoppingCart", _cartItems);
                    }


                }
            }
        }

        StateHasChanged();
    }



}
