@page "/register"

@using TrouvailleFrontend.Components.Checkout
@using Blazorise

@inject IRegister registerer
@inject NavigationManager navMan
@inject IErrorHandler errorHandler


<div class="page">
    <div class="main-container-style register">

        <h1>Register</h1>

        <EditForm EditContext=@_registerContext OnValidSubmit="SubmitFormAsync">
            <ObjectGraphDataAnnotationsValidator />
            <div class="input-group">
                <h4>Personal Data</h4>
                <InputText id="first-name" @bind-Value=_registerData.RegisterModel.FirstName
                    @bind-Value-oninput=_registerData.RegisterModel.FirstName placeholder="First Name" />
                <InputText id="last-name" @bind-Value=_registerData.RegisterModel.LastName
                    @bind-Value-oninput=_registerData.RegisterModel.LastName placeholder="Surname" />
                <div class="tooltip-trigger">
                    <InputText type="phone" id="phone-number" @bind-Value=_registerData.RegisterModel.PhoneNumber
                        class="not-required" @bind-Value-oninput=_registerData.RegisterModel.PhoneNumber
                        placeholder="Phonenumber" />
                    <div class="tooltip-custom"><b>Not Required</b></div>
                </div>
                <div>
                    <ValidationMessage For="@(() => _registerData.RegisterModel.FirstName)" />
                    <ValidationMessage For="@(() => _registerData.RegisterModel.LastName)" />
                    <ValidationMessage For="@(() => _registerData.RegisterModel.PhoneNumber)" />
                </div>
            </div>

            <div class="input-group">
                <h4>Login Data</h4>
                <InputText type="email" @bind-Value=_registerData.RegisterModel.Email
                    @bind-Value-oninput=_registerData.RegisterModel.Email placeholder="Email" />
                <InputText type="password" @bind-Value=_registerData.RegisterModel.Password
                    @bind-Value-oninput=_registerData.RegisterModel.Password placeholder="Password" />
                <InputText type="password" @bind-Value=_registerData.RegisterModel.ConfirmPassword
                    @bind-Value-oninput=_registerData.RegisterModel.ConfirmPassword placeholder="Confirm Password" />
                <div>
                    <ValidationMessage For="@(() => _registerData.RegisterModel.ConfirmPassword)" />
                    <ValidationMessage For="@(() => _registerData.RegisterModel.Password)" />
                    <ValidationMessage For="@(() => _registerData.RegisterModel.Email)" />
                </div>
            </div>

            <div class="input-group">
                <Address AddressFor="Address" @bind-AddressM=_registerData.AddressModel />
                <div>
                    <ValidationMessage For="@(() => _registerData.AddressModel.CityName)" />
                    <ValidationMessage For="@(() => _registerData.AddressModel.State)" />
                    <ValidationMessage For="@(() => _registerData.AddressModel.PostalCode)" />
                    <ValidationMessage For="@(() => _registerData.AddressModel.Street)" />
                    <ValidationMessage For="@(() => _registerData.AddressModel.StreetNumber)" />
                    <ValidationMessage For="@(() => _registerData.AddressModel.Country)" />
                </div>
            </div>

            <div class="input-group">
                <button type="submit" class="button-style">
                    <span>
                        <i class="fas fa-user-plus "></i>
                    </span>
                </button>
            </div>
        </EditForm>
    </div>
</div>

<Modal @ref="_modal">
    <ModalContent Centered="true">
        @if (_awaitingResponse)
        {
            <ModalHeader>
                <ModalTitle>Pending response from server</ModalTitle>
                <CloseButton />
            </ModalHeader>
            <ModalBody>
                <div class="loading-spiner"></div>
            </ModalBody>
        }
        else
        {
            @if (_registerSuccess)
            {
                <ModalHeader>
                    <ModalTitle>Register Success</ModalTitle>
                    <CloseButton />
                </ModalHeader>
                <ModalBody class="modal-check">
                    <i class="fas fa-check-circle"></i>
                </ModalBody>
            }
            else
            {
                <ModalHeader>
                    <ModalTitle>Register Failure</ModalTitle>
                    <CloseButton />
                </ModalHeader>
                <ModalBody class="modal-warning">
                    <i class="fas fa-times-circle"></i>
                    <div class="modal-error-message">
                        @errorMessage
                    </div>
                </ModalBody>
            }
        }
    </ModalContent>
</Modal>

@code{

    private Modal _modal;
    private RegisterContext _registerData;
    private EditContext _registerContext;
    private bool _registerSuccess;
    private bool _awaitingResponse;
    private string errorMessage = "errorMessage";
    protected override void OnInitialized()
    {
        _registerData = new();
        _registerContext = new(_registerData);
    }

    private async void SubmitFormAsync()
    {
        _registerData.PrepareRegisterModel();

        _awaitingResponse = true;
        _modal.Show();

        _registerSuccess = await registerer.RegisterAsync(_registerData.RegisterModel);
        if (!_registerSuccess)
        {
            errorMessage = errorHandler.GetErrorStringForLastError();
        }

        _awaitingResponse = false;
        StateHasChanged();
    }
}