@page "/"

@using TrouvailleFrontend.Shared.Models
@using TrouvailleFrontend.Components.Index
@using TrouvailleFrontend.Components.Shared

@inject IProductIterator prodIterator
@inject NavigationManager navMan
@inject GlobalStateManager state
@inject ICategoriesRetriever categories

<div class="page">
    <div class="side-panel">
    <SideMenu Header="Additional Filtering Options">
            <label>Ascending Cost: <input type="checkbox" @bind-value=_searchModel.Ascending></label>
            <CustomSelect Name="Categories" Categories=@_categories ChosenCategories=@_searchModel.Categories />
            <button class="button-style reset-search" @onclick="ResetSearch">reset search filters</button>
        </SideMenu>
    </div>
    <div class="main-container">
        @if (_products != null)
        {
            @foreach (ProductModel p in _products)
            {
                <ProductSmall Product=p />
            }
        }
        else
        {
            <LoadingIndicator />
        }
    </div>

    <IndexedNavigation @ref=_idxNav Numbers=_numbers OnNext=Next OnPrev=Prev OnIndexed=ChangeToIndex />
</div>

@code{
    private List<ProductModel> _products;
    private ProductsNumbersModel _numbers;
    private List<CategoryModel> _categories;
    private IndexedNavigation _idxNav;
    private SearchModel _searchModel = new();

    public EventCallback<bool> AscendingChanged { get; set; }

    protected override async Task OnInitializedAsync()
    {
        prodIterator.SearchData = _searchModel;

        _numbers = await prodIterator.GetProductNumbersAsync();
        _products = await prodIterator.GetProductIndexedAsync(prodIterator.GetIndex());
        _categories = await categories.GetCategoriesAsync();

        var header = state.Get<CustomHeader>();
        header.SearchTrigered += SearchAsync;

        StateHasChanged();
    }


    private async Task SearchAsync(SearchModel args)
    {
        _searchModel.SearchWord = args.SearchWord;

        prodIterator.SearchData = _searchModel;

        TriggerLoading();

        _products = await prodIterator.GetProductIndexedAsync(0);
        _numbers = await prodIterator.GetProductNumbersAsync();

        _idxNav.Reset();
        StateHasChanged();
    }

    private async void Next()
    {
        TriggerLoading();
        _products = await prodIterator.GetNextProductsAsync();
        StateHasChanged();
    }

    private async void Prev()
    {
        TriggerLoading();
        _products = await prodIterator.GetPreviousProductsAsync();
        StateHasChanged();
    }

    private async void ChangeToIndex(int index)
    {
        TriggerLoading();
        _products = await prodIterator.GetProductIndexedAsync(index);
        StateHasChanged();
    }
    private async void ResetSearch()
    {
        _searchModel = new();

        TriggerLoading();

        _products = await prodIterator.GetProductIndexedAsync(0);
        _numbers = await prodIterator.GetProductNumbersAsync();

        _idxNav.Reset();
        StateHasChanged();
    }

    private void TriggerLoading()
    {
        _products = null;
        StateHasChanged();
    }
}