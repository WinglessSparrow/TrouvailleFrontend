@page "/"

@using TrouvailleFrontend.Shared.Models
@using TrouvailleFrontend.Components.Index
@using TrouvailleFrontend.Components.Shared

@inject IProductIterator prodIterator
@inject NavigationManager navMan
@inject GlobalStateManager state
@inject ICategoriesRetriever categories

<div class="page">
    <div class="side-panel">
        <SideMenu>
            <label>Ascending Cost: <input type="checkbox" @bind-value=_searchModel.Ascending></label>
            <CustomSelect Name="Categories" Categories=@_categories ChosenCategories=@_searchModel.Categories />
        </SideMenu>
    </div>
    <div class="main-container">
        @if (_products != null)
        {
            @foreach (ProductModel p in _products)
            {
                <ProductSmall Product=p />
            }
        }
    </div>

    <IndexedNavigation @ref=_idxNav Numbers=_numbers OnNext=Next OnPrev=Prev OnIndexed=ChangeToIndex />

    @* <div class="indexed-navigation">
        <button @onclick="prev" disabled="@_prevButton" class="next-prev-button">
        <Icon Name="IconName.ArrowLeft" />

        </button>
        <div class="page-numbers-container">
        @if (_numbers != null)
        {
        @for (int i = 1; i <= (_numbers.NumberOfProduct / _numbers.NumberProductsPerIteration) + 1; i++)
        {
        var temp = i - 1;
        <div class="page-number" @onclick="()=>ChangeToIndex(temp)">@i</div>
        }
        }
        </div>
        <button @onclick="next" disabled="@_nextButton" class="next-prev-button">

        <Icon Name="IconName.ArrowRight" />
        </button>
        </div> *@
</div>

@code{
    [CascadingParameter]
    private CustomHeader _header { get; set; }
    private List<ProductModel> _products;
    private ProductsNumbersModel _numbers;
    private List<CategoryModel> _categories;
    private IndexedNavigation _idxNav;
    private SearchModel _searchModel = new();

    public EventCallback<bool> AscendingChanged { get; set; }

    protected override async Task OnInitializedAsync()
    {
        prodIterator.SearchData = _searchModel;
        _numbers = await prodIterator.GetProductNumbersAsync();
        _products = await prodIterator.GetProductIndexedAsync(prodIterator.GetIndex());
        _categories = await categories.GetCategoriesAsync();

        StateHasChanged();

        var header = state.Get<CustomHeader>();
        header.SearchTrigered += SearchAsync;
    }


    private async Task SearchAsync(SearchModel args)
    {
        _searchModel.SearchWord = args.SearchWord;

        prodIterator.SearchData = _searchModel;

        Console.WriteLine(_searchModel.Ascending + " ascendign");

        _products = await prodIterator.GetProductIndexedAsync(0);
        _numbers = await prodIterator.GetProductNumbersAsync();
        StateHasChanged();
    }

    private async void Next()
    {
        _products = await prodIterator.GetNextProductsAsync();
        StateHasChanged();
    }

    private async void Prev()
    {
        _products = await prodIterator.GetPreviousProductsAsync();
        StateHasChanged();
    }

    private async void ChangeToIndex(int index)
    {
        _products = await prodIterator.GetProductIndexedAsync(index);
        StateHasChanged();
    }

    private void ResetFilters()
    {
        navMan.NavigateTo("/", forceLoad: true);
    }
}