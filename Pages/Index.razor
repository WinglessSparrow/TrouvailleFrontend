@page "/"

@using TrouvailleFrontend.Shared.Models
@using TrouvailleFrontend.Components.Index
@using TrouvailleFrontend.Components.Shared

@inject IProductIterator iterator
@inject NavigationManager navMan
@inject GlobalStateManager state

<div class="page">
    <div class="side-panel">
        <SideMenu>
            <div
                style="display: flex; flex-direction: column; justify-content: center; align-items: center; height: 400px; gap: 20px">
                <label>Ascending Cost: <input type="checkbox" @bind-value=_ascending></label>
            </div>
        </SideMenu>
    </div>
    <div class="main-container">
        @if (_products != null)
        {
            @foreach (ProductModel p in _products)
            {
                <ProductSmall Product=p />
            }
        }
    </div>
    <div class="indexed-navigation">
        <button @onclick="prev" disabled="@_prevButton" class="next-prev-button">
            <Icon Name="IconName.ArrowLeft" />
            @* prev *@
        </button>
        <div class="page-numbers-container">
            @if (_numbers != null)
            {
                @for (int i = 1; i <= (_numbers.NumberOfProduct / _numbers.NumberProductsPerIteration) + 1; i++)
                {
                    var temp = i - 1;
                    <div class="page-number" @onclick="()=>ChangeToIndex(temp)">@i</div>
                }
            }
        </div>
        <button @onclick="next" disabled="@_nextButton" class="next-prev-button">
            @* next *@
            <Icon Name="IconName.ArrowRight" />
        </button>
    </div>
</div>

@code{
    [CascadingParameter]
    private CustomHeader _header { get; set; }
    private List<ProductModel> _products;
    private ProductsNumbersModel _numbers;
    private bool _ascending = false;
    public EventCallback<bool> AscendingChanged { get; set; }

    private bool _nextButton = false;
    private bool _prevButton = false;
    protected override async Task OnInitializedAsync()
    {

        _numbers = await iterator.GetProductNumbersAsync();
        _products = await iterator.GetProductIndexedAsync(iterator.GetIndex());
        StateHasChanged();

        var header = state.Get<CustomHeader>();
        header.SearchTrigered += SearchAsync;
    }


    private async Task SearchAsync(SearchModel args)
    {
        iterator.SearchWord = args.SearchWord;
        iterator.Ascending = _ascending;

        Console.WriteLine(iterator.Ascending + " ascendign");

        _products = await iterator.GetProductIndexedAsync(0);
        _numbers = await iterator.GetProductNumbersAsync();
        StateHasChanged();
    }

    private async void next()
    {
        var temp = await iterator.GetNextProductsAsync();
        if (temp == null) _nextButton = true;
        else _products = temp;

        if (_prevButton) _prevButton = false;
        StateHasChanged();
    }

    private async void prev()
    {
        var temp = await iterator.GetPreviousProductsAsync();
        if (temp == null) _prevButton = true;
        else _products = temp;

        if (_nextButton) _nextButton = false;
        StateHasChanged();
    }

    private async void ChangeToIndex(int index)
    {
        _products = await iterator.GetProductIndexedAsync(index);
        if (_nextButton) _nextButton = false;
        if (_prevButton) _prevButton = false;
        StateHasChanged();
    }
}