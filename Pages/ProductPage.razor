@page "/product/{Id}"

@using System.Collections.Generic
@using TrouvailleFrontend.Components.Shared
@using TrouvailleFrontend.Shared.Models
@using TrouvailleFrontend.Shared.Classes.Interfaces

@inject IJSRuntime JSRuntime
@inject ILocalStorage localStorage
@inject IHttpRequest httpRequest
@inject IProductsRetriever productRetriever

<div class="page">
    <div class="product">
        @if (_product != null)
        {
            <div class="product-image main-container-style">
                <img class="product-picture center-flex" src="data:image/png;base64,@_product.Picture.ImageData"
                alt="Image loading Error" />
            </div>

            <div class="product-controls main-container-style">
                <div class="product-name">
                    <h2>@_product.Name</h2>
                </div>
                <div class="stars">
                    <StarsView Product=_product Classes="product-stars" />
                </div>
                <div class="price">
                    <h2><b>Price: @_price</b></h2>
                </div>
                <div class="stock">
                    <h4>@_stock</h4>
                </div>
                <div class="number-in-shopping-cart">
                    <h4>
                        <b>In
                            <Icon Name="IconName.ShoppingCart" />: @_amountInShoppingCart
                        </b>
                    </h4>
                </div>
                <div class="to-shopping-cart">
                    <button class="button-style" disabled="@_disabled" @onclick="@addToCart">
                        <Icon Name="IconName.CartPlus" />
                    </button>
                </div>
            </div>
            <div class="product-description main-container-style">
                <h3>Description:</h3>
                <div class="description-wrapper">
                    <section>@_product.Description</section>
                </div>
            </div>

        }
        else
        {
            <LoadingIndicator />
        }
        <div class="product-rating main-container-style">
            <div class="overlay-under-construction">
                <p>Under Construction</p>
            </div>
        </div>
    </div>

    <div class="rating">
        <!-- Not Implemented -->
    </div>
</div>


@code {
    private bool _disabled = false;

    [Parameter]
    public string Id { get; set; }
    public int Amount { get; set; } = 1;

    private string _stock;
    private string _price;
    private ProductModel _product;
    private int _amountInShoppingCart = 0;
    private List<ShoppingCartItemModel> _shoppingCart = new List<ShoppingCartItemModel>();


    public async void addToCart()
    {
        bool alreadyInShoppingCart = false;
        bool inStock = _product.InStock > 0;

        //finding the item in shopping cart
        foreach (var item in _shoppingCart)
        {
            if (item.ProductId.Equals(_product.ProductId))
            {
                Console.WriteLine(_product.InStock);
                Console.WriteLine(item.Cardinality);

                alreadyInShoppingCart = true;
                item.Cardinality += Amount;
                _amountInShoppingCart = item.Cardinality;
            }
        }

        //check if the item is already in it
        if (!alreadyInShoppingCart)
        {
            _shoppingCart.Add(new ShoppingCartItemModel() { ProductId = _product.ProductId, Cardinality = Amount });
            _amountInShoppingCart += Amount;
        }

        await localStorage.SetStorageAsync<List<ShoppingCartItemModel>>("shoppingCart", _shoppingCart);

    }


    protected override async Task OnInitializedAsync()
    {
        _product = await productRetriever.GetProductByIdAsync(Id);
        _shoppingCart = await localStorage.GetStorageAsync<List<ShoppingCartItemModel>>("shoppingCart");

        foreach (var sc in _shoppingCart)
        {
            if (sc.ProductId.Equals(_product.ProductId))
            {
                _amountInShoppingCart = sc.Cardinality;
            }
        }

        _stock = StockConverter.ParseStockToString(_product.InStock);

        if (_product.InStock == 0)
        {
            _disabled = true;
        }

        _price = CurencyManager.ParseToCurency(_product.Price);
    }
}