@page "/account"

@using TrouvailleFrontend.Components.Account
@using TrouvailleFrontend.Components.Shared

@inject ILocalStorage local
@inject IUserDataGetter userHandler
@inject NavigationManager navMan

<div class="main-container-style">
    @if (_userModel != null && _validToken == true)
    {

        if (_userModel.IsDisabled)
        {
            <section class="deletion">
                The account is in Deletion Process, you cannot change any data during this process
                <br />
                If you haven't initiated the process, contact the Administration
            </section>
        }
        else
        {
            <CascadingValue Value="@_userModel">
                <CascadingValue Value="@_modal">
                    <TabControl>
                        <CustomTab Name="My Account">
                            <AccountMain />
                        </CustomTab>
                        <CustomTab Name="Orders">
                            <AccountOrders />
                        </CustomTab>
                        <CustomTab Name="Settings">
                            <AccountSettings />
                        </CustomTab>
                    </TabControl>
                </CascadingValue>
            </CascadingValue>
        }
    }

</div>

<CustomModal @ref=_modal Name="Account" ButtonText="Epic"
    OnCloseFailure='@(()=>{navMan.NavigateTo("/account", forceLoad: true);})' />
@* OnCloseSuccess='@(()=>{_modal.Modal.Hide();})' *@

@*</div> *@

@code {
    CustomModal _modal;
    private UserModel _userModel;
    private TokenModel _token;

    private bool _validToken = false;

    protected override async Task OnInitializedAsync()
    {
        _token = await local.GetStorageAsync<TokenModel>("authToken");
        _validToken = _token != null && _token.AuthToken != "" && _token.expireDate > DateTime.Today;

        if (!_validToken)
        {
            navMan.NavigateTo("/login", forceLoad: true);
        }

        _userModel = await userHandler.getUserDataAsync();
    }
}