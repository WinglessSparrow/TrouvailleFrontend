@page "/checkout"

@using TrouvailleFrontend.Shared.Models
@using TrouvailleFrontend.Shared.Enums
@using TrouvailleFrontend.Components.Checkout
@using TrouvailleFrontend.Components.Shared

@inject ILocalStorage local
@inject IProductsRetriever productsRetriever
@inject IHttpRequest http
@inject NavigationManager navMan

<div class="page">
    <div class="content">
        @* <EditForm id="order-form" Model=@_order OnValidSubmit="PostOrder"> *@
        <EditForm id="order-form" EditContext=@_eContext OnValidSubmit="PostOrder"
            OnInvalidSubmit=@(()=>{Console.WriteLine("Test");})>
            <ObjectGraphDataAnnotationsValidator />

            <div class="addresses">
                <div class="addresses-input-wrapper">
                    <Address AddressFor="Invoice Address" @bind-AddressM="_order.InvoiceAddress" />
                    <Address AddressFor="Delivery Address" @bind-AddressM="_order.DeliveryAddress"
                        IsDisabled=@_isDeliverySameInvoice />
                </div>
                <label for="address-equal-chck">
                    <InputCheckbox id="address-equal-chck" @bind-Value=_isDeliverySameInvoice @onclick="SetDelivery" />
                    Delivery address same as Invoivce address
                </label>
            </div>

            <div class="radio-group-container">
                <h4>Payment Method</h4>
                <div class="radio-container">
                    <InputRadioGroup Name="radio-grp-payment" @bind-Value=_order.PaymentMethod>
                        @foreach (var method in (PaymentMethod[])Enum.GetValues(typeof(PaymentMethod)))
                        {
                            var temp = method;
                            <div class="radio-wraper">
                                <InputRadio id=@temp Value="temp" Name="radio-grp-payment" />
                                <label for=@temp>@temp</label>
                            </div>
                        }
                    </InputRadioGroup>
                </div>
            </div>

            <div class="radio-group-container">
                <h4>Shipping Method</h4>
                <div class="radio-container">
                    <InputRadioGroup Name="radio-grp-shipping" @bind-Value=_order.ShipmentMethod>
                        @foreach (var method in (ShipmentMethod[])Enum.GetValues(typeof(ShipmentMethod)))
                        {
                            var temp = method;
                            <div class="radio-wraper">
                                <InputRadio id=@temp Value="temp" Name="radio-grp-shipping" />
                                <label for=@temp>@temp</label>
                            </div>
                        }
                    </InputRadioGroup>
                </div>
            </div>
            <CHProductsOverview Products=@_products ItemData=@_cartItems TotalPrice=@_totalPrice />
        </EditForm>
    </div>
    <div class="side-menu">
        <SideMenu>
            <SideMenuContent TotalPriceWithoutTax=@_totalPriceWithoutTax TotalPrice=@_totalPrice ForForm="order-form" />
        </SideMenu>
    </div>
</div>

@* TODO ERROR SYSTEM *@
@code{
    private EditContext _eContext;
    private double _totalPriceWithoutTax;
    private double _totalPrice;
    private bool _isDeliverySameInvoice = false;
    private OrderModel _order;
    private List<ShoppingCartItemModel> _cartItems { get; set; }
    private List<ProductModel> _products { get; set; }

    private void SetDelivery()
    {
        _order.DeliveryAddress = (!_isDeliverySameInvoice) ? _order.InvoiceAddress : new AddressModel();
        this.StateHasChanged();
    }

    protected override async Task OnInitializedAsync()
    {
        _cartItems = await local.GetStorageAsync<List<ShoppingCartItemModel>>("shoppingCart");
        _products = await productsRetriever.GetProductsByIdAsync(_cartItems);

        Console.WriteLine($"cart: {_cartItems.Count()}");
        Console.WriteLine($"products: {_products.Count()}");

        for (int i = 0; i < _cartItems.Count(); i++)
        {
            _totalPrice += _cartItems[i].Cardinality * _products[i].Price;
            //calculating tax
            double tax = ((double)_products[i].Tax) / 100.0;
            _totalPriceWithoutTax += (_products[i].Price - _products[i].Price * tax) * _cartItems[i].Cardinality;
        }
    }

    protected override void OnInitialized()
    {
        _order = new();
        _eContext = new(_order);
    }

    protected async Task PostOrder()
    {
        _order.Products = _cartItems;
        var response = await http.PostRequestAsync<OrderModel>("", _order);
        _order = new();
        //TODO Navigate to thank you page or error, depending on the recieved code
        navMan.NavigateTo("");
    }
}
