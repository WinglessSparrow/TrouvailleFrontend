@page "/checkout"

@using TrouvailleFrontend.Shared.Models
@using TrouvailleFrontend.Shared.Classes
@using TrouvailleFrontend.Components.Checkout
@using System.Net.Http

@inject ILocalStorage local
@inject IProductsRetriever productsRetriever

<div class="page">
    <div class="content">

        <EditForm Model="@_order" OnValidSubmit="PostOrder">
            <DataAnnotationsValidator />

            <div class="addresses">
                <div class="addresses-input-wrapper">
                    <Address AddressFor="Invoice Address" @bind-AddressM="_order.InvoiceAddress" />
                    <Address AddressFor="Delivery Address" @bind-AddressM="_order.DeliveryAddress"
                        IsDisabled=@IsDeliverySameInvoice />
                </div>
                <label for="address-equal-chck">
                    <InputCheckbox id="address-equal-chck" @bind-Value=IsDeliverySameInvoice />
                    Delivery address same as Invoivce address
                </label>
            </div>

            <Payment @bind-PaymentMethod=_order.PaymentMethod />

            <Shipping @bind-ShippingMethod=_order.ShipmentMethod />

            <CHProductsOverview Products=@_products ItemData=@_cartItems />
        </EditForm>
    </div>
    <div class="side-menu">
        @* <div class="sticky-container"></div> *@
    </div>
</div>


@* TODO, GET ITEMS FROM SHOPING CART / SHOW ERROR WHEN NO ITEMS IN IT! *@
@* TODO ERROR SYSTEM *@

@code{
    @* public EventCallback<AddressModel> AddressMChanged { get; set; } *@

    public bool IsDeliverySameInvoice { get; set; } = true;

    private OrderModel _order = new();
    private List<ShoppingCartItemModel> _cartItems { get; set; }
    private List<ProductModel> _products { get; set; }
    protected override async Task OnInitializedAsync()
    {
        _cartItems = await local.GetStorageAsync<List<ShoppingCartItemModel>>("shoppingCart");
        _products = await productsRetriever.GetProductsByIdAsync(_cartItems);
    }
    protected async Task PostOrder()
    {
        //TODO if IsDeliverySameInvoice => delivery = invoice
        _cartItems = await local.GetStorageAsync<List<ShoppingCartItemModel>>("shoppingCart");
        Console.WriteLine(_order.DeliveryAddress);
    }
}