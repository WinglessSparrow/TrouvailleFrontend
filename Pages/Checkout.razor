@page "/checkout"

@using TrouvailleFrontend.Shared.Models
@using TrouvailleFrontend.Shared.Classes
@using TrouvailleFrontend.Components.Checkout
@using TrouvailleFrontend.Components.Shared

@inject ILocalStorage local
@inject IProductsRetriever productsRetriever
@inject IHttpRequest http

<div class="page">
    <div class="content">
        <EditForm id="order-form" Model="@_order" OnValidSubmit="PostOrder">
            <DataAnnotationsValidator />

            <div class="addresses">
                <div class="addresses-input-wrapper">
                    <Address AddressFor="Invoice Address" @bind-AddressM="_order.InvoiceAddress" />
                    <Address AddressFor="Delivery Address" @bind-AddressM="_order.DeliveryAddress"
                        IsDisabled=@_isDeliverySameInvoice />
                </div>
                <label for="address-equal-chck">
                    <InputCheckbox id="address-equal-chck" @bind-Value=_isDeliverySameInvoice />
                    Delivery address same as Invoivce address
                </label>
            </div>

            <div class="radio-group-container">
                <h4>Payment Method</h4>
                <div class="radio-container">
                    <InputRadioGroup Name="radio-grp-payment" @bind-Value=_order.PaymentMethod>
                        @foreach (var method in (PaymentMethod[])Enum.GetValues(typeof(PaymentMethod)))
                        {
                            var temp = method;
                            <div class="radio-wraper">
                                <InputRadio id=@temp Value="temp" Name="radio-grp-payment" />
                                <label for=@temp>@temp</label>
                            </div>
                        }
                    </InputRadioGroup>
                </div>
            </div>

            <div class="radio-group-container">
                <h4>Shipping Method</h4>
                <div class="radio-container">
                    <InputRadioGroup Name="radio-grp-shipping" @bind-Value=_order.ShipmentMethod>
                        @foreach (var method in (ShipmentMethod[])Enum.GetValues(typeof(ShipmentMethod)))
                        {
                            var temp = method;
                            <div class="radio-wraper">
                                <InputRadio id=@temp Value="temp" Name="radio-grp-shipping" />
                                <label for=@temp>@temp</label>
                            </div>
                        }
                    </InputRadioGroup>
                </div>
            </div>

            <CHProductsOverview Products=@_products ItemData=@_cartItems TotalPrice=@_totalPrice />
        </EditForm>
    </div>
    <div class="side-menu">
        <SideMenu>
            <SideMenuContent TotalPriceWithoutTax=@_totalPriceWithoutTax TotalPrice=@_totalPrice ForForm="order-form" />
        </SideMenu>
    </div>
</div>

@* TODO ERROR SYSTEM *@

@code{
    private double _totalPriceWithoutTax;
    private double _totalPrice;
    private bool _isDeliverySameInvoice = true;
    private OrderModel _order = new();
    private List<ShoppingCartItemModel> _cartItems { get; set; }
    private List<ProductModel> _products { get; set; }
    protected override async Task OnInitializedAsync()
    {
        _cartItems = await local.GetStorageAsync<List<ShoppingCartItemModel>>("shoppingCart");
        _products = await productsRetriever.GetProductsByIdAsync(_cartItems);

        for (int i = 0; i < _cartItems.Count(); i++)
        {
            _totalPrice += _cartItems[i].Cardinality * _products[i].Price;

            double tax = ((double)_products[i].Vat) / 100.0;
            _totalPriceWithoutTax += (_products[i].Price - tax) * _cartItems[i].Cardinality;
        }
    }
    protected async Task PostOrder()
    {
        //TODO Post over HttpRequest

        if (_isDeliverySameInvoice) _order.DeliveryAddress = new AddressModel()
        {
            CityName = _order.InvoiceAddress.CityName,
            Country = _order.InvoiceAddress.Country,
            PostalCode = _order.InvoiceAddress.PostalCode,
            State =
        _order.InvoiceAddress.State,
            Street = _order.InvoiceAddress.Street,
            StreetNumber = _order.InvoiceAddress.StreetNumber
        };
        _order.Products = _cartItems;
        var response = await http.PostRequestAsync<OrderModel>("", _order);
    }
}