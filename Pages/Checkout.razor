@page "/checkout"

@using TrouvailleFrontend.Shared.Models
@using TrouvailleFrontend.Shared.Enums
@using TrouvailleFrontend.Components.Checkout
@using TrouvailleFrontend.Components.Shared
@using System.Text.Json

@inject ILocalStorage local
@inject IProductsRetriever productsRetriever
@inject NavigationManager navMan
@inject IOrderer orderer
@inject IJSRuntime js
@inject IErrorHandler errorHandler

<div class="page">
    @if (_cartItems != null && _cartItems.Count() > 0)
    {
        <div class="content">
            <EditForm id="order-form" EditContext=@_eContext OnValidSubmit="SubmitOrderAsync">
                <ObjectGraphDataAnnotationsValidator />

                <div class="addresses main-container-style">
                    <h4><i class="fas fa-address-card"></i> Address</h4>
                    <div class="addresses-input-wrapper">
                        <Address AddressFor="Invoice Address" @bind-AddressM="_order.InvoiceAddress" />
                        <Address AddressFor="Delivery Address" @bind-AddressM="_order.DeliveryAddress"
                        IsDisabled=@_isDeliverySameInvoice />
                    </div>
                    <label for="address-equal-chck">
                        <InputCheckbox id="address-equal-chck" @bind-Value=_isDeliverySameInvoice @onclick="SetDelivery" />
                        Delivery address same as Invoivce address
                    </label>
                </div>

                <div class="radio-group-container main-container-style">
                    <h4><i class="fas fa-money-bill-wave"></i> Payment Method</h4>
                    <div class="radio-container">
                        <InputRadioGroup Name="radio-grp-payment" @bind-Value=_order.PaymentMethod>
                            @foreach (var method in (PaymentMethod[])Enum.GetValues(typeof(PaymentMethod)))
                            {
                                var temp = method;
                            <div class="radio-wraper">
                                <InputRadio id=@temp Value="temp" Name="radio-grp-payment" />
                                <label for=@temp>@temp</label>
                            </div>
                            }
                    </InputRadioGroup>
                </div>
            </div>

            <div class="radio-group-container main-container-style">
                <h4><i class="fas fa-parachute-box"></i> Shipping Method</h4>
                <div class="radio-container">
                    <InputRadioGroup Name="radio-grp-shipping" @bind-Value=_order.ShipmentMethod>
                        @foreach (var method in (ShipmentMethod[])Enum.GetValues(typeof(ShipmentMethod)))
                            {
                                var temp = method;
                            <div class="radio-wraper">
                                <InputRadio id=@temp Value="temp" Name="radio-grp-shipping" />
                                <label for=@temp>@temp</label>
                            </div>
                            }
                    </InputRadioGroup>
                </div>
            </div>
            <CHProductsOverview Products=@_products ItemData=@_cartItems TotalPrice=@_totalPrice />
        </EditForm>
    </div>
        <div class="side-menu">
            <SideMenu>
                <SideMenuContent TotalPriceWithoutTax=@_totalPriceWithoutTax TotalPrice=@_totalPrice ForForm="order-form" />
            </SideMenu>
        </div>
    }
    else
    {
        <ErrorMessage>
            @if (_cartItems != null && _cartItems.Count() <= 0)
            {
                <b>Your shopping cart is empty <br /> please fill it with stuff</b>
            }
        </ErrorMessage>
    }
</div>

<CustomModal @ref="_modal" Name="Register" ButtonText="End Order" OnCloseSuccess="@Success" OnCloseFailure="@Failure" />
@* </div> *@

@code {
    private CustomModal _modal;
    private EditContext _eContext;
    private TokenModel _token;
    private double _totalPriceWithoutTax;
    private double _totalPrice;
    private bool _isDeliverySameInvoice = false;
    private OrderModel _order;
    private List<ShoppingCartItemModel> _cartItems { get; set; }
    private List<ProductModel> _products { get; set; }

    private void Success()
    {
        navMan.NavigateTo("/", forceLoad: true);
    }

    private void Failure()
    {
        navMan.NavigateTo("/checkout", forceLoad: true);
    }

    private void SetDelivery()
    {
        _order.DeliveryAddress = (!_isDeliverySameInvoice) ? _order.InvoiceAddress : new AddressModel();
        this.StateHasChanged();
    }

    protected override async Task OnInitializedAsync()
    {
        _token = await local.GetStorageAsync<TokenModel>("authToken");
        _cartItems = await local.GetStorageAsync<List<ShoppingCartItemModel>>("shoppingCart");

        if (_cartItems != null && _cartItems.Count() > 0)
        {
            _products = await productsRetriever.GetProductsByIdAsync(_cartItems);

            for (int i = 0; i < _cartItems.Count(); i++)
            {
                _totalPrice += _cartItems[i].Cardinality * _products[i].Price;
                //calculating tax
                double tax = ((double)_products[i].Tax) / 100.0;
                _totalPriceWithoutTax += (_products[i].Price - _products[i].Price * tax) * _cartItems[i].Cardinality;
            }
        }
    }

    protected override void OnInitialized()
    {
        _order = new();
        _eContext = new(_order);
    }

    protected async Task SubmitOrderAsync()
    {
        _modal.AwaitingResponse = true;

        if (CheckStock())
        {
            _modal.Success = await orderer.OrderAsync(PrepareOrder());

            if (_modal.Success)
            {
                _modal.Message = "Thanks for the Purchase";
                await local.RemoveStorageAsync("shoppingCart");
            }
            else
            {
                _modal.ErrorMessage = errorHandler.GetLastErrorString();
            }
        }
        else
        {
            _modal.ErrorMessage = "Some Items are not in stock!";
        }

        _modal.AwaitingResponse = false;

        StateHasChanged();
    }

    private bool CheckStock()
    {
        bool everythingInStock = true;
        foreach (var p in _products)
        {
            if (p.InStock <= 0)
            {
                everythingInStock = false;
                break;
            }
        }

        return everythingInStock;
    }

    private OrderModel PrepareOrder()
    {
        _order.Products = _cartItems;

        //deep copy of the object
        var json = JsonSerializer.Serialize(_order);
        var objectToSend = JsonSerializer.Deserialize<OrderModel>(json);

        if (_isDeliverySameInvoice) objectToSend.DeliveryAddress = null;

        return objectToSend;
    }
}
