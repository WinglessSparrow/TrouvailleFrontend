@namespace TrouvailleFrontend.Components.ShoppingCart

@using TrouvailleFrontend.Pages
@inject ILocalStorage local
@inject NavigationManager navMan

<div class="product-view main-container-style">

    <img class="product-picture center-flex" src="data:image/png;base64,@Picture.ImageData" alt="Image loading Error"
        onerror="this.src='/assets/images/imageError.png';" />
    <div class="name">
        <p>@Name</p>
    </div>
    <div>
        <p>Price: @_priceCalculated<br />
            <sub>per item: @_price</sub>
        </p>
    </div>
    <div class="cardinality">
        <div>
            <p>In Shopping cart:<br />
                @Cardinality
            </p>
        </div>
        <div class="buttons">
            <button @onclick="@increase">
                <i class="fas fa-plus"></i>
            </button>
            <button @onclick="@decrease">
                <i class="fas fa-minus"></i>
            </button>
        </div>
        <div class="delete">
            <button @onclick="@delete">
                <i class="fas fa-trash-alt"></i>
            </button>
        </div>
    </div>

    <div>
        <p>Availability:<br />
            <sub>@_stock</sub>
        </p>
    </div>

    @if (Stock <= 0)
    {
        <div class="warning">
            <i class="fas fa-exclamation-triangle"></i>
        </div>
    }

</div>

@code{
    private string _stock;
    private string _priceCalculated;
    private string _price;

    [Parameter]
    public string CartID { get; set; }
    [Parameter]
    public string Name { get; set; }
    [Parameter]
    public int Stock { get; set; }
    [Parameter]
    public decimal Price { get; set; }
    [Parameter]
    public int Cardinality { get; set; }
    [Parameter]
    public PictureModel Picture { get; set; }

    [CascadingParameter]
    private ShoppingCart _scSite { get; set; }

    protected override void OnInitialized()
    {
        _priceCalculated = CurencyManager.ParseToCurency(Price * Cardinality);
        _price = CurencyManager.ParseToCurency(Price);
        _stock = StockConverter.ParseStockToString(Stock);

    }
    protected override void OnParametersSet()
    {
        if (Picture == null) Picture = new() { ImageData = "fucking fuck" };
    }

    public async void increase()
    {
        await _scSite.increase(CartID);
        reCalcPrice();
    }

    public async void decrease()
    {
        await _scSite.decrease(CartID);
        reCalcPrice();
    }

    public async void delete()
    {
        await _scSite.delete(CartID);
        reCalcPrice();
    }
    private void reCalcPrice()
    {
        OnInitialized();
        StateHasChanged();
    }

}