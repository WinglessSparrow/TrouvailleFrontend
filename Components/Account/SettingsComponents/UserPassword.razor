@namespace TrouvailleFrontend.Components.Account
@using TrouvailleFrontend.Shared.Models.Auth

@inherits UserChanger

@inject IPasswordChanger passwordChanger
@inject IErrorHandler errorHandler
@inject ILogin loginer

<div>
    <div class='password @(_isChangeDone? " " : "changing")'>
        <h4>Password</h4>
        <EditForm EditContext="@_context" OnSubmit="SubmitAsync">
            <DataAnnotationsValidator />

            <InputText type="password" id="new-password" @bind-Value=_newPassword.NewPassword class="not-required"
                @bind-Value-oninput=_newPassword.NewPassword placeholder="new Password" disabled="@_isChangeDone" />
            <InputText type="password" id="confirm-new-password" @bind-Value=_newPassword.ConfirmPassword
                class="not-required" @bind-Value-oninput=_newPassword.ConfirmPassword placeholder="Confirm new Password"
                disabled="@_isChangeDone" />

            <button type="submit" class="button-style button-change">@_buttonText</button>
            @if (!_isChangeDone)
            {
                <button type="button" class="button-style button-change" @onclick=ChangeState>Cancel</button>
            }
        </EditForm>
    </div>
</div>

@code{


    private ResetPasswordModel _newPassword = new();

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
    }

    override protected async void SubmitAsync()
    {
        ChangeState();

        if (_isChangeDone)
        {
            _modal.AwaitingResponse = true;

            if (_context.Validate())
                _modal.Success = await passwordChanger.ChangePasswordAsync(_newPassword);
            else
                ChangeState();

            if (!_modal.Success)
                _modal.ErrorMessage = errorHandler.GetLastErrorString();
            else
                _modal.Message = "The Password was succesufully changed";

            _modal.AwaitingResponse = false;
        }
    }
}