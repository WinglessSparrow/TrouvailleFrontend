@namespace TrouvailleFrontend.Components.Account

@using TrouvailleFrontend.Shared.Classes.Functional

@inject IUserDataChanger userChanger
@inject IErrorHandler errorHandler


@code {
    [CascadingParameter]
    protected UserModel _originUserData { get; set; }
    [CascadingParameter]
    protected CustomModal _modal { get; set; }
    protected UserModel _userData { get; set; }
    protected EditContext _context;
    protected bool _isChangeDone = true;
    protected string _buttonText = "Change Data";

    protected override void OnParametersSet()
    {
        if (_modal == null || _originUserData == null)
            throw new Exception("Modal and/or UserData are required as Cascading parameter in UserChanger");

        //deep copy is needed, because otherwise diferent fields will affect each other
        _userData = DeepCopier.DeepCopy<UserModel>(_originUserData);
        _context = new(_userData);
    }

    protected virtual async void SubmitAsync()
    {
        ChangeState();

        if (_isChangeDone)
        {
            _modal.AwaitingResponse = true;

            if (_context.Validate())
            {
                Console.WriteLine("/");
                Console.WriteLine(_userData.LastName);
                Console.WriteLine(_userData.FirstName);
                Console.WriteLine(_userData.PhoneNumber);
                Console.WriteLine("/");

                _modal.Success = await userChanger.changeUserDataAsync(_userData);
            }
            else
            {
                ChangeState();

                //resseting the data
                _userData = DeepCopier.DeepCopy<UserModel>(_originUserData);
            }
        }

        if (!_modal.Success)
            _modal.ErrorMessage = errorHandler.GetLastErrorString();
        else
            _modal.Message = "The Information was succesufully changed";

        _modal.AwaitingResponse = false;
    }

    protected void ChangeState()
    {
        _isChangeDone = !_isChangeDone;
        _buttonText = (_isChangeDone) ? "Change Data" : "Submit Changes";

        StateHasChanged();
    }
}